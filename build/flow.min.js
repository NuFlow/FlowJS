!function(){"use strict";function t(){const t=this;if(!t.flowRunning)if(t.flowRunning=!0,0!==t.pipes.events.length)for(const e of t.pipes.events)i.call(this,e);else{const e=t.pipes.targets[0];i.call(t,e)}}function i(t){const i=t.target,s=t.params;if("function"==typeof i){const t=this;function o(){e.call(t,0,...Array.from(arguments))}s.push(o);const r=i.apply({},s);"object"===typeof r&&r instanceof Promise&&r.then(((...t)=>o.apply(null,[null,...Array.from(t)])))}}function e(t,i,e){const o=this.pipes.targets[t];if(!i)return o&&o.target?void s.call(this,t,o,e):(this.flowRunning=!1,void(this.promisified.isPromised&&!this.promisified.resolved&&(this.promisified.resolve(e),this.promisified.resolved=!0,this.promisified.isPromised=!1)))}function s(t,i,s){const o=i.params;s&&o.push(s);const r=this;function n(){e.call(r,t+1,...Array.from(arguments))}o.push(n);const c=i.target.apply({},o);"object"===typeof c&&c instanceof Promise&&c.then(((...t)=>n.apply(null,[null,...Array.from(t)])))}const o=function(t){return u.call(this,"init",t,Array.from(arguments).slice(1))},r=function(t){return u.call(this,"to",t,Array.from(arguments).slice(1))},n=function(t){return u.call(this,"from",t,Array.from(arguments).slice(1))},c=function(){if(this.promisified.isPromised)return new Promise(((i,e)=>{this.promisified.resolve=i,this.promisified.reject=e,t.call(this)}));t.call(this)},l=function(){return this.promisified.isPromised=!0,this};function u(t,i,e){if("function"!=typeof i)throw new Error('Flow expected a function but received "'+typeof i+'" instead!');const s={direction:t,target:i,params:e},o=this;switch(s.direction){case"init":if(!function(t){try{return Reflect.construct(String,[],t),!0}catch(t){return!1}}(i))throw new Error("Flow target is not a constructor!");const t=new i(...e);o.pipes.init.push(t);break;case"from":o.pipes.events.push(s);break;case"to":o.pipes.targets.push(s);break;default:console.warn("WARNING: Flow has received an unknown pipe direction. Please post a bug to the author about this.")}return this}class f{pipes={init:[],events:[],targets:[]};flowRunning=!1;promisified={isPromised:!1,resolved:!1,resolve:()=>{},reject:()=>{}};init=o;to=r;from=n;run=c;promisify=l;static modules={};modules={};thread(){return new f}static use(t,i){if(this.modules[t])throw new Error(t+" collides with existing Flow module or property.");this.modules[t]=i}constructor(){return this.modules=this.constructor.modules,new Proxy(this,{get:function(t,i){return Reflect.has(t,i)?Reflect.get(t,i):Reflect.has(t.modules,i)?t.modules[i]:void 0}})}}}();
