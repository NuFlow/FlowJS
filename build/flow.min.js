!function(){"use strict";function t(){const t=this;if(!t.flowRunning)if(t.flowRunning=!0,0!==t.pipes.events.length)for(const i of t.pipes.events)e.call(t,-1,i);else{const i=t.pipes.targets[0];e.call(t,0,i)}}function e(t,e,...s){const n=this;function o(){i.call(n,t+1,...Array.from(arguments))}const r=[...s,...e.params];r.push(o);const c=e.target.apply({},r);"object"===typeof c&&c instanceof Promise&&c.then(((...t)=>o.call(null,...Array.from(t))))}function i(t,...i){const s=this.pipes.targets[t];if(!s||!s.target)return this.flowRunning=!1,void(this.promisified.isPromised&&(this.promisified.resolve(...i),this.promisified.isPromised=!1));e.call(this,t,s,...i)}const s=function(t){return u.call(this,"init",t,Array.from(arguments).slice(1))},n=function(t){return u.call(this,"to",t,Array.from(arguments).slice(1))},o=function(t){return u.call(this,"from",t,Array.from(arguments).slice(1))},r=function(){if(this.promisified.isPromised)return new Promise(((e,i)=>{this.promisified.resolve=e,this.promisified.reject=i,t.call(this)}));t.call(this)},c=function(){return this.promisified.isPromised=!0,this};function u(t,e,i){const s={direction:t,target:e,params:i};"function"!=typeof e&&function(t){const e=typeof t;return!(t&&"object"===e&&t.then&&"function"==typeof t.then||null!=t&&"function"==e)}(e)&&(s.target=async()=>e),"object"==typeof e&&"function"==typeof e.then&&(s.target=t=>e.then(t));const n=this;switch(s.direction){case"init":if(!function(t){try{return Reflect.construct(String,[],t),!0}catch(t){return!1}}(e))throw new Error("Flow target is not a constructor!");const t=new e(...i);n.pipes.init.push(t);break;case"from":n.pipes.events.push(s);break;case"to":n.pipes.targets.push(s);break;default:console.warn("WARNING: Flow has received an unknown pipe direction. Please post a bug to the author about this.")}return this}class f{pipes={init:[],events:[],targets:[]};flowRunning=!1;promisified={isPromised:!1,resolve:()=>{},reject:()=>{}};init=s;to=n;from=o;run=r;promisify=c;static modules={};modules={};thread(){return new f}static use(t,e){if(this.modules[t])throw new Error(t+" collides with existing Flow module or property.");this.modules[t]=e}constructor(){return this.modules=this.constructor.modules,new Proxy(this,{get:function(t,e){return Reflect.has(t,e)?Reflect.get(t,e):Reflect.has(t.modules,e)?t.modules[e]:void 0}})}}}();
