!function(){"use strict";function i(){const i=this;if(!i.flowRunning)if(i.flowRunning=!0,0!==i.pipes.events.length)for(const e of i.pipes.events)t.call(this,e);else{const e=i.pipes.targets[0];t.call(i,e)}}function t(i){const t=i.target,s=i.params;if("function"==typeof t){const i=this;function r(){e.call(i,0,...Array.from(arguments))}s.push(r);const n=t.apply({},s);"object"===typeof n&&n instanceof Promise&&n.then(((...i)=>r.apply(null,[null,...Array.from(i)])))}}function e(i,t,e){const r=this.pipes.targets[i];if(!t)return r&&r.target?void s.call(this,i,r,e):(this.flowRunning=!1,void(this.promisified.isPromised&&!this.promisified.resolved&&(this.promisified.resolve(e),this.promisified.resolved=!0,this.promisified.isPromised=!1)))}function s(i,t,s){const r=t.params;s&&r.push(s);const n=this;function o(){e.call(n,i+1,...Array.from(arguments))}r.push(o);const c=t.target.apply({},r);"object"===typeof c&&c instanceof Promise&&c.then(((...i)=>o.apply(null,[null,...Array.from(i)])))}const r=function(i){return a.call(this,"init",i,Array.from(arguments).slice(1))},n=function(i){return a.call(this,"to",i,Array.from(arguments).slice(1))},o=function(i){return a.call(this,"from",i,Array.from(arguments).slice(1))},c=function(){if(this.promisified.isPromised)return new Promise(((t,e)=>{this.promisified.resolve=t,this.promisified.reject=e,i.call(this)}));i.call(this)},f=function(){return this.promisified.isPromised=!0,this};function a(i,t,e){if("function"!=typeof t)throw new Error('Flow expected a function but received "'+typeof t+'" instead!');const s={direction:i,target:t,params:e},r=this;switch(s.direction){case"init":if(!function(i){try{return Reflect.construct(String,[],i),!0}catch(i){return!1}}(t))throw new Error("Flow target is not a constructor!");const i=new t(...e);r.pipes.init.push(i);break;case"from":r.pipes.events.push(s);break;case"to":r.pipes.targets.push(s);break;default:console.warn("WARNING: Flow has received an unknown pipe direction. Please post a bug to the author about this.")}return this}class l{pipes={init:[],events:[],targets:[]};flowRunning=!1;promisified={isPromised:!1,resolved:!1,resolve:()=>{},reject:()=>{}};init=r;to=n;from=o;run=c;promisify=f;thread(){return new l}}}();
